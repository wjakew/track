/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package ui_components;

import com.jakubwawak.track.connector.Board_Connector;
import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.Issue_Connector;
import com.jakubwawak.track.connector.Task_Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;
import maintenence.Parser;
import user_interface.message_window;

/**
 *Window for creating new board
 * @author kubaw
 */
public class newboard_window extends javax.swing.JDialog {

    /**
     * Creates new form newboard_window
     */
    Connector connector;
    ArrayList<String> board_elements,all_elements;
    int board_id;
    public newboard_window(java.awt.Frame parent, boolean modal,Connector connector) throws UnirestException {
        super(parent, modal);
        this.connector = connector;
        board_elements = new ArrayList<>();
        initComponents();
        this.setLocationRelativeTo(null);
        board_id = -1;
        load_window();
        setVisible(true);
    }
    
    
    
    /**
     * Function for loading window
     */
    void load_window() throws UnirestException{
        // loading all elements
        DefaultListModel dlm = new DefaultListModel();
        Issue_Connector ic = new Issue_Connector(connector);
        Task_Connector tc = new Task_Connector(connector);
        Parser issues = new Parser(ic.load_issues_glances(0, this));
        Parser tasks = new Parser(tc.load_task_glances(0, this));
        ArrayList<String> issues_data = issues.get_arraylist("view");
        ArrayList<String> tasks_data = tasks.get_arraylist("view");
        
        all_elements = new ArrayList<>();
        // adding issues
        if ( issues_data.size() > 0){
            for ( String line : issues_data){
                String [] elements = line.split(":"); 
                try{
                    all_elements.add(elements[0]+":ISSUE| "+elements[1]);
                }catch(Exception e){}
            }
        }
        
        // adding tasks
        if ( tasks_data.size() > 0){
            for ( String line : tasks_data){
                String [] elements = line.split(":"); 
                try{
                    all_elements.add(elements[0]+":TASK| "+elements[1]);
                }catch(Exception e){}
            }
        }
        dlm.addAll(all_elements);
        list_board_all.setModel(dlm);
        
        list_boardelements.setEnabled(false);
        list_board_all.setEnabled(false);
        button_addelement.setEnabled(false);
        button_removeelement.setEnabled(false);
        button_saveelements.setEnabled(false);
        
        DefaultListModel empty = new DefaultListModel();
        list_boardelements.setModel(empty);
    }
    
    /**
     * Function for validating fields
     * @return boolean
     */
    boolean validate_fields(){
        return !field_name.getText().equals("") && !field_desc.getText().equals("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        field_name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        field_desc = new javax.swing.JTextArea();
        button_createboard = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_boardelements = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_board_all = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        button_addelement = new javax.swing.JButton();
        button_removeelement = new javax.swing.JButton();
        button_saveelements = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New board");

        jLabel1.setText("Board name");

        jLabel2.setText("Board description:");

        field_desc.setColumns(20);
        field_desc.setRows(5);
        jScrollPane1.setViewportView(field_desc);

        button_createboard.setText("Create board");
        button_createboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_createboardActionPerformed(evt);
            }
        });

        list_boardelements.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list_boardelements);

        jLabel3.setText("Board elements:");

        list_board_all.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(list_board_all);

        jLabel4.setText("All user elements:");

        button_addelement.setText("<");
        button_addelement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addelementActionPerformed(evt);
            }
        });

        button_removeelement.setText(">");
        button_removeelement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeelementActionPerformed(evt);
            }
        });

        button_saveelements.setText("Save elements to board data");
        button_saveelements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_saveelementsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(field_name)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(button_createboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_addelement, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button_removeelement, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 112, Short.MAX_VALUE))))
                    .addComponent(button_saveelements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(field_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_createboard)
                            .addComponent(button_saveelements))
                        .addContainerGap(17, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(button_addelement, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_removeelement, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_createboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_createboardActionPerformed
        if ( validate_fields()){
            Board_Connector bc = new Board_Connector(connector);
            try {
                Parser parser = new Parser(bc.board_set(field_name.getText(), field_desc.getText(), this));
                if ( parser.get_int("flag") == 1){
                    new message_window(this,true,"Board created board_id = "+parser.get_int("board_id"),"");
                    list_boardelements.setEnabled(true);
                    list_board_all.setEnabled(true);
                    button_addelement.setEnabled(true);
                    button_removeelement.setEnabled(true);
                    button_saveelements.setEnabled(true);
                    field_name.setEnabled(false);
                    field_desc.setEnabled(false);
                    button_createboard.setEnabled(false);
                    board_id = parser.get_int("board_id");
                }
                else{
                    new message_window(this,true,"Database error during database add","");
                }
            } catch (UnirestException ex) {
                new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
            }
        }
        else{
            new message_window(this,true,"Wrong name or description","");
        }
    }//GEN-LAST:event_button_createboardActionPerformed

    private void button_addelementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addelementActionPerformed
        try{
            // add to boardelement
            String selected = list_board_all.getSelectedValue().toString();
            ListModel<String> dl = list_boardelements.getModel();
            DefaultListModel dlm = new DefaultListModel();
            for(int i = 0 ; i<dl.getSize();i++){
                dlm.addElement(dl.getElementAt(i));
            }
            dlm.addElement(selected);
            list_boardelements.setModel(dlm);
            // remove from all elements
            object_editor(selected,list_board_all,0);
        }catch(Exception e){}
    }//GEN-LAST:event_button_addelementActionPerformed

    private void button_removeelementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeelementActionPerformed
        try{
            String selected = list_boardelements.getSelectedValue().toString();
            object_editor(selected,list_board_all,1);
            object_editor(selected,list_boardelements,0);
        }catch(Exception e){}
    }//GEN-LAST:event_button_removeelementActionPerformed

    private void button_saveelementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_saveelementsActionPerformed
        ListModel lm = list_boardelements.getModel();
        ArrayList<String> answer = new ArrayList<>();
        for(int i =0 ; i < lm.getSize(); i++){
            String data = lm.getElementAt(i).toString();
            // X:(ISSUE) data
            try{
                Board_Connector bc =  new Board_Connector(connector);
                int object_id = Integer.parseInt(data.split(":")[0]);
                String board_list_object = data.split(":")[1].split("|")[0];
                System.out.println("object_id: "+object_id+" object category: |"+board_list_object+"|");
                switch(board_list_object){
                    case "I":
                        Parser parser = new Parser(bc.board_addelement_issue(board_id, object_id, this));
                        if ( parser.get_int("flag") == 1){
                            answer.add("Issue "+object_id+" added to board");
                        }
                        else{
                            answer.add("Issue "+object_id+" failed while adding to board");
                        }
                        break;
                    case "T":
                        Parser parser2 = new Parser(bc.board_addelement_task(board_id, object_id, this));
                        if ( parser2.get_int("flag") == 1){
                            answer.add("Task "+object_id+" added to board");
                        }
                        else{
                            answer.add("Task "+object_id+" failed while adding to board");
                        }
                        break;
                }
            }catch(Exception e){
                answer.add("Error\n"+e.toString());
            }
        }
        String ans = "";
        for(String line : answer){
            ans = ans + line + "\n";
        }
        new message_window(this,true,ans,"");
        dispose();
    }//GEN-LAST:event_button_saveelementsActionPerformed

    /**
     * Function for adding or removing objects from lists
     * @param element_data
     * @param object
     * @param mode 
     * mode:
     * 0 - remove
     * 1 - add
     */
    void object_editor(String element_data, JList object, int mode){
        DefaultListModel dlm = new DefaultListModel();
        switch(mode){
            case 0:
                ListModel<String> lm = object.getModel();
                for(int i = 0; i < lm.getSize(); i++){
                    if (!lm.getElementAt(i).equals(element_data)){
                        dlm.addElement(lm.getElementAt(i));
                    }
                }
                break;
            case 1:
                ListModel<String> lm2 = object.getModel();
                for(int i = 0; i < lm2.getSize(); i++){
                    dlm.addElement(lm2.getElementAt(i));
                }
                dlm.addElement(element_data);
                break;   
        }
        object.setModel(dlm);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_addelement;
    private javax.swing.JButton button_createboard;
    private javax.swing.JButton button_removeelement;
    private javax.swing.JButton button_saveelements;
    private javax.swing.JTextArea field_desc;
    private javax.swing.JTextField field_name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> list_board_all;
    private javax.swing.JList<String> list_boardelements;
    // End of variables declaration//GEN-END:variables
}
