/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package ui_components;

import com.jakubwawak.track.connector.Board_Connector;
import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.Issue_Connector;
import com.jakubwawak.track.connector.Task_Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Frame;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import maintenence.Parser;
import user_interface.message_window;

/**
 *
 * @author kubaw
 */
public class boardview_window extends javax.swing.JFrame {

    /**
     * Creates new form boardmenager_window
     */
    Connector connector;
    int board_id;
    Frame parent;
    
    int object_id;
    String object_category;
    public boardview_window(java.awt.Frame parent, boolean modal,Connector connector,int board_id) throws UnirestException {
        this.parent = parent;
        this.connector = connector;
        this.board_id = board_id;
        object_id = -1;
        object_category = "";
        initComponents();
        this.setLocationRelativeTo(null);
        load_window();
        load_window_icon();
        setVisible(true);
    }
    
    /**
     * Function for loading window icon
     */
    void load_window_icon(){
        try{
            ImageIcon img = new ImageIcon("track_icon.png");
            this.setIconImage(img.getImage());
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    /**
     * Function for loading window components
     */
    void load_window() throws UnirestException{
        DefaultListModel dlm = new DefaultListModel();
        Board_Connector bc = new Board_Connector(connector);
        Parser parser = new Parser(bc.board_element_list(board_id, this));
        dlm.addAll(parser.get_arraylist("view"));
        list_elements.setModel(dlm);
        this.setAlwaysOnTop(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        list_elements = new javax.swing.JList<>();
        button_setdone = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_removefromboard = new javax.swing.JMenuItem();
        menu_focusmode = new javax.swing.JMenuItem();
        menu_objectdetails = new javax.swing.JMenuItem();
        menu_reloadwindow = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Board view");

        list_elements.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_elements.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_elementsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(list_elements);

        button_setdone.setText("Set as done");
        button_setdone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_setdoneActionPerformed(evt);
            }
        });

        jMenu1.setText("Options");

        menu_removefromboard.setText("Remove from board");
        menu_removefromboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_removefromboardActionPerformed(evt);
            }
        });
        jMenu1.add(menu_removefromboard);

        menu_focusmode.setText("Focus mode");
        menu_focusmode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_focusmodeActionPerformed(evt);
            }
        });
        jMenu1.add(menu_focusmode);

        menu_objectdetails.setText("Object details");
        menu_objectdetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_objectdetailsActionPerformed(evt);
            }
        });
        jMenu1.add(menu_objectdetails);

        menu_reloadwindow.setText("Reload window");
        jMenu1.add(menu_reloadwindow);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(button_setdone, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_setdone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_focusmodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_focusmodeActionPerformed
        if ( menu_focusmode.getText().equals("Focus mode")){
            parent.setVisible(false);
            menu_focusmode.setText("Normal");
        }
        else{
            parent.setVisible(true);
            menu_focusmode.setText("Focus mode");
            this.requestFocus();
        }
    }//GEN-LAST:event_menu_focusmodeActionPerformed

    private void menu_removefromboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_removefromboardActionPerformed
        if ( object_id != -1 && !object_category.equals("") ){
            switch(object_category){
                case "T":
                {
                    Board_Connector bc = new Board_Connector(connector);
                    try{
                        Parser parser = new Parser(bc.board_removeelement_task(object_id, board_id, this));
                        if (parser.get_int("flag") == 1){
                            new message_window(this,true,"Element task "+object_id+" removed from board","");
                            load_window();
                        }
                        else{
                            new message_window(this,true,"Error removing task from board","");
                        }
                    }catch(Exception e){
                        new message_window(this,true,"Error\n"+e.toString(),"ERROR");
                    }
                }
                break;
                case "I":
                {
                    Board_Connector bc = new Board_Connector(connector);
                    try{
                        Parser parser = new Parser(bc.board_removeelement_issue(object_id, board_id, this));
                        if (parser.get_int("flag") == 1){
                            new message_window(this,true,"Element issue "+object_id+" removed from board","");
                            load_window();
                        }
                        else{
                            new message_window(this,true,"Error removing issue from board","");
                        }
                    }catch(Exception e){
                        new message_window(this,true,"Error\n"+e.toString(),"ERROR");
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_menu_removefromboardActionPerformed

    private void list_elementsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_elementsMouseClicked
        try{
            object_id = Integer.parseInt(list_elements.getSelectedValue().toString().split(":")[0]);
            object_category = list_elements.getSelectedValue().toString().split(":")[1].split("|")[0];
            System.out.println("object_id:"+object_id+" object_category:"+object_category);
        }catch(Exception e){}
    }//GEN-LAST:event_list_elementsMouseClicked

    private void button_setdoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_setdoneActionPerformed
        if ( object_id != -1 && !object_category.equals("") ){
            switch(object_category){
                case "T":
                    {
                        Task_Connector tc = new Task_Connector(connector);
                        try {
                            Parser parser = new Parser(tc.set_task_done(object_id, this));
                            if ( parser.get_int("flag") == 1){
                                new message_window(this,true,"Task "+object_id+" set to done","");
                                load_window();
                            }
                            else{
                                new message_window(this,true,"Error setting task done.\n Check log.","");
                            }
                        } catch (UnirestException ex) {
                            new message_window(this,true,"Error\n"+ex.toString(),"");
                        }
                    }
                    break;
                case "I":
                    {
                        Issue_Connector ic = new Issue_Connector(connector);
                        try{
                            Parser parser = new Parser(ic.update_group(object_id, 3, this));
                            if ( parser.get_int("flag") == 1){
                                new message_window(this,true,"Issue "+object_id+" set to done","");
                                load_window();
                            }
                            else{
                                new message_window(this,true,"Error setting issue done.\n Check log.","");
                            }
                        } catch (UnirestException ex) {
                            new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
                            }
                    }
                    break;
            }
        }
    }//GEN-LAST:event_button_setdoneActionPerformed

    private void menu_objectdetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_objectdetailsActionPerformed
        if ( object_id != -1 && !object_category.equals("")){
            switch(object_category){
                case "T":
                {
                    try {
                        new taskdetails_window(this,true,connector,object_id);
                        load_window();
                    } catch (UnirestException ex) {
                        new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
                    }
                }
                break;
                case "I":
                {
                    try{
                        new issuedetails_window(this,true,connector,object_id);
                        load_window();
                    } catch (UnirestException ex) {
                    new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
                }
                }
            }
        }
    }//GEN-LAST:event_menu_objectdetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_setdone;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> list_elements;
    private javax.swing.JMenuItem menu_focusmode;
    private javax.swing.JMenuItem menu_objectdetails;
    private javax.swing.JMenuItem menu_reloadwindow;
    private javax.swing.JMenuItem menu_removefromboard;
    // End of variables declaration//GEN-END:variables
}
