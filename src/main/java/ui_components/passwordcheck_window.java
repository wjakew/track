/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package ui_components;

import com.google.gson.JsonElement;
import com.jakubwawak.track.connector.Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Image;
import java.awt.Toolkit;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import maintenence.Parser;
import maintenence.Password_Validator;
import user_interface.login_window;
import user_interface.message_window;

/**
 *Window for checking password
 * @author kubaw
 */
public class passwordcheck_window extends javax.swing.JDialog {

    /**
     * Creates new form passwordcheck_window
     */
    Connector connector;
    public passwordcheck_window(java.awt.Frame parent, boolean modal,Connector connector) {
        super(parent, modal);
        this.connector = connector;
        initComponents();
        this.setLocationRelativeTo(null);
        Image icon = Toolkit.getDefaultToolkit().getImage("track_icon.ico");
        this.setIconImage(icon);
        setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        field_password = new javax.swing.JPasswordField();
        button_check = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Password check");

        jLabel1.setText("Password:");

        button_check.setText("Check");
        button_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_checkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_password, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_password, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_check)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_checkActionPerformed
        if ( !field_password.getText().equals("")){
            try {
                Password_Validator pv = new Password_Validator(field_password.getText());
                JsonElement response = connector.user_checkpassword(pv.hash());
                Parser parser = new Parser(response);
                
                switch(parser.get_int("user_id")){
                    case -11:
                        // failed to auth session token
                        new message_window(this,true,"Error validating app token","TOKEN-ERROR");
                        break;
                    case -99:
                        new message_window(this,true,"Session has expired","SESSION");
                        new login_window(this,true,connector,1);
                        break;
                    case -88:
                        new message_window(this,true,"Error while validating session token","SESSION-ERROR");
                        break;
                    case -5:
                        new message_window(this,true,"Password error. Given password is wrong","");
                        break;
                    default:
                        new message_window(this,true,"Password validated","");
                        break;
                }
            } catch (NoSuchAlgorithmException ex) {
                new message_window(this,true,"Error validating password","ERROR");
            } catch (UnirestException ex) {
                new message_window(this,true,"Error validating password","ERROR");
            }
        }
        else{
            new message_window(this,true,"Password vield is empty","");
        }
    }//GEN-LAST:event_button_checkActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_check;
    private javax.swing.JPasswordField field_password;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
