/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package ui_components;

import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.Room_Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import maintenence.Parser;
import user_interface.message_window;
import user_interface.messages_window;

/**
 *Window for managing rooms
 * @author jakubwawak
 */
public class roommanager_window extends javax.swing.JFrame {

    Connector connector;
    ArrayList<ArrayList> objects;
    ArrayList<String> users;
    
    /**
     * Creates new form roommanager_window
     */
    public roommanager_window(Connector connector) throws UnirestException {
        this.connector = connector;
        objects = new ArrayList<>();
        users = new ArrayList<>();
        initComponents();
        this.setLocationRelativeTo(null);
        load_window();
        setVisible(true);
    }
    
    /**
     * Function for loading window icon
     */
    void load_window_icon(){
        try{
            ImageIcon img = new ImageIcon("track_icon.png");
            this.setIconImage(img.getImage());
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    /**
     * Function for loading 
     */
    void load_members(){
        DefaultListModel dlm = new DefaultListModel();
        String data = users.get(list_rooms.getSelectedIndex());
        String[] members = data.split(",");
        for(String member : members){
            member = member.replaceAll(",", "");
            dlm.addElement(member);
        }
        if ( members.length == 0 ){
            dlm.addElement("Empty");
            list_members.setEnabled(false);
        }
        list_members.setModel(dlm);
    }
    
    /**
     * Function for loading window components
     */
    void load_window() throws UnirestException{
        load_window_icon();
        Room_Connector rc = new Room_Connector(connector);
        Parser parser = new Parser(rc.list_rooms(this));
        DefaultListModel rooms = new DefaultListModel();
        if (parser.get_int("flag") == 1){
            /**
             *  object.add(Integer.toString(objects.getJSONObject(i).getInt("room_id")));
                object.add(objects.getJSONObject(i).getString("room_name"));
                object.add(objects.getJSONObject(i).getString("room_password"));
                object.add(objects.getJSONObject(i).getString("room_code"));
                object.add(objects.getJSONObject(i).getString("room_desc"));
                object.add(objects.getJSONObject(i).getString("owner_login"));
             */
            objects = parser.get_room_lists("view2");
            users = parser.get_arraylist("view");
            
            if ( objects.size() == 0 ){
                rooms.addElement("Empty");
                list_rooms.setEnabled(false);
                list_members.setEnabled(false);
                list_rooms.setModel(rooms);
                list_members.setModel(rooms);
            }
            else{
                list_rooms.setEnabled(true);
                list_members.setEnabled(true);
                for(ArrayList data : objects){
                    rooms.addElement(data.get(0)+": "+data.get(1));
                }
                list_rooms.setModel(rooms);
                list_rooms.setSelectedIndex(0);
                
                try{
                    label_owner.setText("Owner: "+objects.get(list_rooms.getSelectedIndex()).get(5));
                }catch(Exception e){}
                
                load_members();
            }
        }
        else{
            new message_window(this,true,"Error loading room content\nCheck API log","ERROR");
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_rooms = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_members = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        label_owner = new javax.swing.JLabel();
        button_addmember = new javax.swing.JButton();
        button_removemember = new javax.swing.JButton();
        button_createroom = new javax.swing.JButton();
        button_deleteroom = new javax.swing.JButton();
        button_roomdata = new javax.swing.JButton();
        button_addtoroom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Room manager");

        list_rooms.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list_rooms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_roomsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list_rooms);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Rooms");

        list_members.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list_members);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Members");

        label_owner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_owner.setText("Owner:");

        button_addmember.setText("+");
        button_addmember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addmemberActionPerformed(evt);
            }
        });

        button_removemember.setText("-");
        button_removemember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removememberActionPerformed(evt);
            }
        });

        button_createroom.setText("Create new room");
        button_createroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_createroomActionPerformed(evt);
            }
        });

        button_deleteroom.setText("Delete room");
        button_deleteroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteroomActionPerformed(evt);
            }
        });

        button_roomdata.setText("Room data");
        button_roomdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_roomdataActionPerformed(evt);
            }
        });

        button_addtoroom.setText("+");
        button_addtoroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addtoroomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_addtoroom)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_owner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(button_roomdata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_removemember)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_addmember))
                    .addComponent(button_createroom, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(button_deleteroom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(button_addtoroom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_addmember)
                            .addComponent(button_removemember)
                            .addComponent(button_roomdata))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_owner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_createroom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_deleteroom, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void list_roomsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_roomsMouseClicked
        load_members();
        label_owner.setText("Owner: "+objects.get(list_rooms.getSelectedIndex()).get(5));
    }//GEN-LAST:event_list_roomsMouseClicked

    private void button_createroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_createroomActionPerformed
        new createroom_window(this,true,connector);
        try {
            load_window();
        } catch (UnirestException ex) {
            new message_window(this,true,"Error loading room content\nCheck API log\n"+ex.toString(),"ERROR");
        }
    }//GEN-LAST:event_button_createroomActionPerformed

    private void button_addmemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addmemberActionPerformed
        try{
            int room_id = Integer.parseInt(list_rooms.getSelectedValue().split(":")[0]);
            new addmember_window(this,true,connector,room_id,2);
        }catch(Exception e){}
        
        try {
            load_window();
        } catch (UnirestException ex) {
            new message_window(this,true,"Error adding member!\n"+ex.toString(),"ERROR");
        }
    }//GEN-LAST:event_button_addmemberActionPerformed

    private void button_deleteroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deleteroomActionPerformed
        try{
            int room_id = Integer.parseInt(list_rooms.getSelectedValue().split(":")[0]);
            new removeroom_window(this,true,connector,room_id);
            load_window();
        }catch(Exception e){}
        try {
            load_window();
        } catch (UnirestException ex) {
            new message_window(this,true,"Error adding member!\n"+ex.toString(),"ERROR");
        }
    }//GEN-LAST:event_button_deleteroomActionPerformed

    private void button_roomdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_roomdataActionPerformed
       try{
           int room_id = Integer.parseInt(list_rooms.getSelectedValue().split(":")[0]);
           Room_Connector rc = new Room_Connector(connector);
           Parser parser = new Parser(rc.get_room_data(room_id, this));
           if ( parser.get_int("flag") == 1 ){
               new message_window(this,true,parser.get_array("view").getString(0),"Room data");
           }
           else{
               new message_window(this,true,"Error connecting to the API","");
           }
       }catch(Exception e){}
    }//GEN-LAST:event_button_roomdataActionPerformed

    private void button_removememberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removememberActionPerformed
        try{
            String login_name = list_members.getSelectedValue().toString();
            int user_id = Integer.parseInt(login_name.split(":")[0]);
            int room_id = Integer.parseInt(list_rooms.getSelectedValue().toString().split(":")[0]);
            Room_Connector rc = new Room_Connector(connector);
            Parser parser = new Parser(rc.remove_room_member(room_id, user_id, this));
            if ( parser.get_int("flag") == 1 ){
                new message_window(this,true,"Member removed","");
                load_window();
            }
            else if ( parser.get_int("flag") == 2  || parser.get_int("flag") == -2){
                new message_window(this,true,"You are not a owner.\nCannot remove member","");
            }
            else if ( parser.get_int("flag") == 3){
                new message_window(this,true,"Cannot remove admin!","");
            }
            else{
                new message_window(this,true,"Error.\nCheck API log","ERROR");
            }
        }catch(Exception e){}
    }//GEN-LAST:event_button_removememberActionPerformed

    private void button_addtoroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addtoroomActionPerformed
        new roominvite_window(this,true,connector);
        try {
            load_window();
        } catch (UnirestException ex) {
            new message_window(this,true,"Failed to add room\n"+ex.toString(),"ERROR");
        }
    }//GEN-LAST:event_button_addtoroomActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_addmember;
    private javax.swing.JButton button_addtoroom;
    private javax.swing.JButton button_createroom;
    private javax.swing.JButton button_deleteroom;
    private javax.swing.JButton button_removemember;
    private javax.swing.JButton button_roomdata;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_owner;
    private javax.swing.JList<String> list_members;
    private javax.swing.JList<String> list_rooms;
    // End of variables declaration//GEN-END:variables
}
