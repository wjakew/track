/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package ui_components;

import com.google.gson.JsonElement;
import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.OAuth;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.io.IOException;
import maintenence.Parser;
import maintenence.TrackLogger;
import user_interface.login_window;
import user_interface.message_window;

/**
 *
 * @author kubaw
 */
public class configurationload_window extends javax.swing.JDialog {

    /**
     * Creates new form configurationload_window
     */
    Connector connector;
    OAuth oauth;
    TrackLogger logger;
    String version,build;
    public configurationload_window(java.awt.Frame parent, boolean modal,Connector connector,OAuth oauth,TrackLogger logger,
            String version,String build) {
        super(parent, modal);
        this.connector = connector;
        this.oauth = oauth;
        this.logger = logger;
        this.version = version;
        this.build = build;
        initComponents();
        this.setLocationRelativeTo(null);
        setVisible(true);
    }
    
    /**
     * Function for validating fields
     * @return Boolean
     */
    boolean validate_fields(){
        return !field_ip.getText().isBlank() && !field_apptoken.getText().isBlank() && !field_userlogin.getText().isBlank();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        field_ip = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        field_apptoken = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        field_userlogin = new javax.swing.JTextField();
        button_connect = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Track Client - New configuration");

        jLabel1.setText("server ip");

        jLabel2.setText("app token");

        jLabel3.setText("user login");

        button_connect.setText("Connect");
        button_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_connectActionPerformed(evt);
            }
        });

        jLabel4.setText("Configuration file not found!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(field_userlogin))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(field_apptoken))
                    .addComponent(button_connect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(field_ip))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(field_ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(field_apptoken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(field_userlogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_connect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_connectActionPerformed
        if ( validate_fields() ){
            oauth.server_ip = field_ip.getText();
            oauth.app_token = field_apptoken.getText();
            oauth.user_login = field_userlogin.getText();
            connector = new Connector(oauth,logger);
            JsonElement el = null;
            try {
                el = connector.health();
            } catch (Exception ex) {
                new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
            }
            if ( el == null){
                // connection cannot be established
                new message_window(this,true,"Failed to connect to the server","ERROR");
                logger.log("Failed to connect to the server",1);
            }
            else{
                Parser parser = new Parser(el);        
                if ( connector.health ){
                    connector.version = version;
                    connector.bulid = build;
                    System.out.println("Connected to: "+oauth.server_ip);
                    System.out.println("API "+parser.get_string("version")+ " "+parser.get_string("build_number"));
                    logger.log("Connected to: "+oauth.server_ip+
                            " ("+parser.get_string("version")+"/"+parser.get_string("build_number")+")",0);
                    new message_window(this,true,"Successfully connected to "+oauth.server_ip,"");
                    try {
                        oauth.save_to_file();
                    } catch (IOException ex) {
                        new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
                    }
                    dispose();
                    new login_window(connector,0);
                }
                else{
                    logger.log("Server health failed to check. Server seems not to respond",0);
                    new message_window("Health of the server failed to check","ERROR");
                }
            }
        }
        else{
            new message_window(this,true,"Error in given data. Check fields.","");
        }
    }//GEN-LAST:event_button_connectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_connect;
    private javax.swing.JPasswordField field_apptoken;
    private javax.swing.JTextField field_ip;
    private javax.swing.JTextField field_userlogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
