/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package ui_components;

import com.google.gson.JsonElement;
import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.Issue_Connector;
import com.jakubwawak.track.connector.Task_Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import maintenence.Parser;
import user_interface.message_window;

/**
 *Window for showing archives
 * @author kubaw
 */
public class archive_window extends javax.swing.JDialog {

    /**
     * Creates new form archive_window
     * modes:
     * 1 - task
     * 2 - issue
     */
    Connector connector;
    int mode;
    public archive_window(java.awt.Frame parent, boolean modal,Connector connector, int mode) throws UnirestException {
        super(parent, modal);
        initComponents();
        this.connector = connector;
        this.mode = mode;
        this.setLocationRelativeTo(null);
        load_window();
        setVisible(true);
    }
    
    /**
     * Function for loading window content
     */
    void load_window() throws UnirestException{
        load_window_icon();
        DefaultListModel dlm = new DefaultListModel();
        JsonElement data = null;
        switch(mode){
            case 1:
                Task_Connector tc = new Task_Connector(connector);
                data = tc.get_archive(this);
                this.setTitle("Archived tasks");
                break;
            case 2:
                Issue_Connector ic = new Issue_Connector(connector);
                data = ic.get_archive(this);
                this.setTitle("Archived issues");
                break;
        }
        Parser parser = new Parser(data);
        addAll(dlm,parser.get_arraylist("view"));
        list_archive.setModel(dlm);
    }
    
    /**
     * Function for adding all data to the view
     * @param dlm
     * @param data 
     */
    void addAll(DefaultListModel dlm, ArrayList<String> data){
        for (String element : data){
            dlm.addElement(element);
        }
    }
    /**
     * Function for loading window icon
     */
    void load_window_icon(){
        try{
            ImageIcon img = new ImageIcon("track_icon.png");
            this.setIconImage(img.getImage());
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_archive = new javax.swing.JList<>();
        button_set_active = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        list_archive.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(list_archive);

        button_set_active.setText("Set active again");
        button_set_active.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_set_activeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(button_set_active, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_set_active)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_set_activeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_set_activeActionPerformed
        switch(mode){
            case 1:
                try{
                    int task_id = Integer.parseInt(list_archive.getSelectedValue().toString().split(":")[0]);
                    Task_Connector tc = new Task_Connector(connector);
                    Parser parser = new Parser(tc.set_task_open(task_id, this));
                    if ( parser.get_int("flag") == 1){
                        new message_window(this,true,"Task opened again","");
                        load_window();
                    }
                    else{
                        new message_window(this,true,"Error opening task","ERROR");
                    }
                } catch (Exception ex) {
                    new message_window(this,true,"Error\n"+ex.toString(),"");
                }
                break;
            case 2:
                try{
                    int issue_id = Integer.parseInt(list_archive.getSelectedValue().toString().split(":")[0]);
                    Issue_Connector tc = new Issue_Connector(connector);
                    Parser parser = new Parser(tc.open_issue(issue_id, this));
                    if ( parser.get_int("flag") == 1){
                        new message_window(this,true,"Issue opened again","");
                        load_window();
                    }
                    else{
                        new message_window(this,true,"Error opening issue","ERROR");
                    }
                } catch (Exception ex) {
                    new message_window(this,true,"Error\n"+ex.toString(),"");
                }
                break;
                
        }
        
    }//GEN-LAST:event_button_set_activeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_set_active;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list_archive;
    // End of variables declaration//GEN-END:variables
}
