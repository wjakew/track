/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package user_interface;

import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.Messages_Connector;
import com.jakubwawak.track.connector.Room_Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import maintenence.Parser;

/**
 *Window for maintaining room messages
 * @author jakubwawak
 */
public class messages_window extends javax.swing.JFrame {

    Connector connector;
    ArrayList<ArrayList> rooms;
    ArrayList<String> members;
    int room_id;
    /**
     * Creates new form messages_window
     */
    public messages_window(Connector connector) {
        this.connector = connector;
        rooms = new ArrayList<>();
        initComponents();
        load_window();
        this.setLocationRelativeTo(null);
        setVisible(true);
    }
    
    /**
     * Function for loading window icon
     */
    void load_window_icon(){
        try{
            ImageIcon img = new ImageIcon("track_icon.png");
            this.setIconImage(img.getImage());
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    /**
     * Function for loading members data
     */
    void load_members_list(){
        DefaultComboBoxModel dcm = new DefaultComboBoxModel();
        dcm.addElement("Room");
        for(String data : members.get(combobox_rooms.getSelectedIndex()).split(",")){
            data = data.replaceAll(",", "");
            dcm.addElement(data);
        }
        combobox_members.setModel(dcm);
    }
    /**
     * Function for loading combobox data
     */
    void load_room_list() throws UnirestException{
        Room_Connector rc = new Room_Connector(connector);
        Parser parser = new Parser(rc.list_rooms(this));
        if ( parser.get_int("flag") == 1 ){
            rooms = parser.get_room_lists("view2");
            members = parser.get_arraylist("view");
            DefaultComboBoxModel dcm = new DefaultComboBoxModel();
            for(ArrayList room : rooms){
                dcm.addElement(room.get(0)+":"+room.get(1));
            }
            combobox_rooms.setModel(dcm);
        }
        else{
            new message_window(this,true,"Cannot load room list.","");
            dispose();
        }
    }
    
    /**
     * Function for loading messages data
     * @param room_id 
     */
    void load_messages(int room_id) throws UnirestException{
        Messages_Connector mc = new Messages_Connector(connector);
        Parser parser = new Parser(mc.get_messages(room_id, this));
        
        if ( parser.get_flag() == 1 ){
            
            ArrayList<ArrayList> messages = parser.get_messages_list("view3");
            DefaultTableModel dtm = new DefaultTableModel();
            dtm.addColumn("User");
            dtm.addColumn("Time");
            dtm.addColumn("Message");
            for(ArrayList message : messages){ 
                /**
                 *  object.add(objects.getJSONObject(i).getString("room_time"));
                    object.add(objects.getJSONObject(i).getString("room_message_content"));
                    object.add(objects.getJSONObject(i).getString("user_login"));
                 */
                dtm.addRow(new Object[] {message.get(2),message.get(0),message.get(1)});
            }
            table_messages.setModel(dtm);
        }
    }
    
    /**
     * Function for loading window components
     */
    void load_window(){
        try {
            field_message.setEnabled(false);
            button_send.setEnabled(false);
            button_reload.setEnabled(false);
            combobox_members.setEnabled(false);
            load_room_list();
            load_window_icon();
        } catch (UnirestException ex) {
            new message_window(this,true,"Error loading window components","");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combobox_rooms = new javax.swing.JComboBox<>();
        button_setroom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        field_message = new javax.swing.JTextArea();
        button_send = new javax.swing.JButton();
        label_counter = new javax.swing.JLabel();
        button_reload = new javax.swing.JButton();
        combobox_members = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_messages = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Message Box");

        combobox_rooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        button_setroom.setText("Set room");
        button_setroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_setroomActionPerformed(evt);
            }
        });

        field_message.setColumns(20);
        field_message.setRows(5);
        field_message.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_messageKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(field_message);

        button_send.setText("Send");
        button_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_sendActionPerformed(evt);
            }
        });

        label_counter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_counter.setText("0/250");

        button_reload.setText("Reload");
        button_reload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_reloadActionPerformed(evt);
            }
        });

        combobox_members.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Room" }));
        combobox_members.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                combobox_membersMouseReleased(evt);
            }
        });

        table_messages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "From", "Time", "Message"
            }
        ));
        jScrollPane2.setViewportView(table_messages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(combobox_members, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox_rooms, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_setroom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button_reload))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_counter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button_send, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combobox_rooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_setroom)
                    .addComponent(combobox_members, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_counter, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(button_reload, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(button_send, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_setroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_setroomActionPerformed
        try{
            room_id = Integer.parseInt(combobox_rooms.getSelectedItem().toString().split(":")[0]);
            System.out.println("Room selected: "+room_id);
            field_message.setEnabled(true);
            button_send.setEnabled(true);
            button_reload.setEnabled(true);
            load_members_list();
            combobox_members.setEnabled(true);
            load_messages(room_id);
        }catch(Exception e){System.out.println(e.toString());}
        
    }//GEN-LAST:event_button_setroomActionPerformed

    private void field_messageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_messageKeyPressed
        int size = field_message.getText().length();
        label_counter.setText(size +"/250");
        if (size > 250){
            label_counter.setForeground(Color.red);
        }
        else{
            label_counter.setForeground(Color.white);
        }
    }//GEN-LAST:event_field_messageKeyPressed

    private void combobox_membersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_combobox_membersMouseReleased
        if ( !combobox_members.getSelectedItem().toString().equals("Room") ){
            field_message.setText(field_message.getText()+" @"+combobox_members.getSelectedItem().toString());
            combobox_members.setSelectedIndex(0);
        }
    }//GEN-LAST:event_combobox_membersMouseReleased

    private void button_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_sendActionPerformed
        String message = field_message.getText();
        if ( message.length() > 0 ){
            Messages_Connector mc = new Messages_Connector(connector);
            try {
                Parser parser = new Parser(mc.send_message(message, room_id, this));
                if ( parser.get_flag() == 1 ){
                    field_message.setText("");
                    label_counter.setText("0/250");
                    load_messages(room_id);
                }
                else{
                    new message_window(this,true,"Failed to send message.\nCheck API log.","ERROR");
                }
            } catch (UnirestException ex) {
                new message_window(this,true,"Failed to send message\n"+ex.toString(),"ERROR");
            }
        }
        else{
            new message_window(this,true,"Message empty!","");
            
        }
    }//GEN-LAST:event_button_sendActionPerformed

    private void button_reloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_reloadActionPerformed
        try {
            load_messages(room_id);
        } catch (UnirestException ex) {
            new message_window(this,true,"Failed to load messages\n"+ex.toString(),"ERROR");
        }
    }//GEN-LAST:event_button_reloadActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_reload;
    private javax.swing.JButton button_send;
    private javax.swing.JButton button_setroom;
    private javax.swing.JComboBox<String> combobox_members;
    private javax.swing.JComboBox<String> combobox_rooms;
    private javax.swing.JTextArea field_message;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_counter;
    private javax.swing.JTable table_messages;
    // End of variables declaration//GEN-END:variables
}
