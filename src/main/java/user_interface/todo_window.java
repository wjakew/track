/*
Jakub Wawak
kubawawak@gmail.com
all rights reseved
 */
package user_interface;

import com.jakubwawak.track.connector.Connector;
import com.jakubwawak.track.connector.ToDo_Connector;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import maintenence.Parser;
import ui_components.todostate_window;

/**
 *Window for adding todos
 * @author jakubwawak
 */
public class todo_window extends javax.swing.JFrame {

    /**
     * Creates new form todo_window
     */
    Connector connector;
    int user_id;
    public todo_window(Connector connector,int user_id,JFrame object) throws UnirestException {
        this.connector = connector;
        this.user_id = user_id;
        this.setLocationRelativeTo(object);
        initComponents();
        load_window();
        setVisible(true);
    }
    
    /**
     * Function for loading list of todos
     * @throws UnirestException 
     */
    void load_todo_list() throws UnirestException{
        try{
            int mode = -1;
            switch(button_filter.getText()){
                case "Only undone":
                    mode = 1;
                    break;
                case "All":
                    mode = 0;
                    break;
            }
            ToDo_Connector tdc = new ToDo_Connector(connector);
            Parser parser = new Parser(tdc.get_todo_list(user_id, this,mode));
            DefaultListModel dtm = new DefaultListModel();
            ArrayList<String> todo_glances = parser.get_arraylist("view");
            for(String line : todo_glances){
                System.out.println(line);
            }
            dtm.addAll(todo_glances);
            table_todo.setModel(dtm);
        }catch(Exception e){
            new message_window(this,true,"Error\nFailed to load todo list\nCheck API log","ERROR");
        }
    }
    
    /**
     * Function for loading window icon
     */
    void load_window_icon(){
        try{
            ImageIcon img = new ImageIcon("track_icon.png");
            this.setIconImage(img.getImage());
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    /**
     * Function for loading window content
     */
    void load_window() throws UnirestException{
        button_filter.setText("Only undone");
        load_window_icon();
        load_todo_list();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button_filter = new javax.swing.JButton();
        button_add = new javax.swing.JButton();
        button_state = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_todo = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Track ToDo");

        button_filter.setText("Only undone");
        button_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_filterActionPerformed(evt);
            }
        });

        button_add.setText("+");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_state.setText("Set state");
        button_state.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_stateActionPerformed(evt);
            }
        });

        table_todo.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(table_todo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(button_filter))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(button_state)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                        .addComponent(button_add, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_filter)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_add)
                    .addComponent(button_state))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_filterActionPerformed
        switch(button_filter.getText()){
            case "Only undone":
            {
                try {
                    button_filter.setText("All");
                    load_todo_list();
                } catch (UnirestException ex) {
                    new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
                    dispose();
                }
            }
            break;
            case "All":
                try{
                    button_filter.setText("Only undone");
                    load_todo_list();
                } catch (UnirestException ex) {
                    new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
                    dispose();
                }
            break;    
        }
    }//GEN-LAST:event_button_filterActionPerformed

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        new todoadd_window(this,true,connector);
        try {
            load_todo_list();
        } catch (UnirestException ex) {
            new message_window(this,true,"Error\n"+ex.toString(),"ERROR");
        }
        
    }//GEN-LAST:event_button_addActionPerformed

    private void button_stateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_stateActionPerformed
        try{
            int todo_id = Integer.parseInt(table_todo.getSelectedValue().split(":")[0]);
            new todostate_window(this,true,connector,todo_id);
        }catch(NumberFormatException e){
            new message_window(this,true,"No todo selected","");
        }catch(Exception e){
            new message_window(this,true,"Failed to set state. Check API log","ERROR");
        }
    }//GEN-LAST:event_button_stateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_filter;
    private javax.swing.JButton button_state;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> table_todo;
    // End of variables declaration//GEN-END:variables
}
